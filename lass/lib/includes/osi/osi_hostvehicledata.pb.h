// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: osi_hostvehicledata.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_osi_5fhostvehicledata_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_osi_5fhostvehicledata_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3015000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3015002 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "osi_common.pb.h"
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_osi_5fhostvehicledata_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_osi_5fhostvehicledata_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[1]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_osi_5fhostvehicledata_2eproto;
::PROTOBUF_NAMESPACE_ID::Metadata descriptor_table_osi_5fhostvehicledata_2eproto_metadata_getter(int index);
namespace osi3 {
class HostVehicleData;
struct HostVehicleDataDefaultTypeInternal;
extern HostVehicleDataDefaultTypeInternal _HostVehicleData_default_instance_;
}  // namespace osi3
PROTOBUF_NAMESPACE_OPEN
template<> ::osi3::HostVehicleData* Arena::CreateMaybeMessage<::osi3::HostVehicleData>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace osi3 {

// ===================================================================

class HostVehicleData PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:osi3.HostVehicleData) */ {
 public:
  inline HostVehicleData() : HostVehicleData(nullptr) {}
  virtual ~HostVehicleData();
  explicit constexpr HostVehicleData(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  HostVehicleData(const HostVehicleData& from);
  HostVehicleData(HostVehicleData&& from) noexcept
    : HostVehicleData() {
    *this = ::std::move(from);
  }

  inline HostVehicleData& operator=(const HostVehicleData& from) {
    CopyFrom(from);
    return *this;
  }
  inline HostVehicleData& operator=(HostVehicleData&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const HostVehicleData& default_instance() {
    return *internal_default_instance();
  }
  static inline const HostVehicleData* internal_default_instance() {
    return reinterpret_cast<const HostVehicleData*>(
               &_HostVehicleData_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(HostVehicleData& a, HostVehicleData& b) {
    a.Swap(&b);
  }
  inline void Swap(HostVehicleData* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(HostVehicleData* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline HostVehicleData* New() const final {
    return CreateMaybeMessage<HostVehicleData>(nullptr);
  }

  HostVehicleData* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<HostVehicleData>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const HostVehicleData& from);
  void MergeFrom(const HostVehicleData& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(HostVehicleData* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "osi3.HostVehicleData";
  }
  protected:
  explicit HostVehicleData(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    return ::descriptor_table_osi_5fhostvehicledata_2eproto_metadata_getter(kIndexInFileMessages);
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kLocationFieldNumber = 1,
    kLocationRmseFieldNumber = 2,
  };
  // .osi3.BaseMoving location = 1;
  bool has_location() const;
  private:
  bool _internal_has_location() const;
  public:
  void clear_location();
  const ::osi3::BaseMoving& location() const;
  ::osi3::BaseMoving* release_location();
  ::osi3::BaseMoving* mutable_location();
  void set_allocated_location(::osi3::BaseMoving* location);
  private:
  const ::osi3::BaseMoving& _internal_location() const;
  ::osi3::BaseMoving* _internal_mutable_location();
  public:
  void unsafe_arena_set_allocated_location(
      ::osi3::BaseMoving* location);
  ::osi3::BaseMoving* unsafe_arena_release_location();

  // .osi3.BaseMoving location_rmse = 2;
  bool has_location_rmse() const;
  private:
  bool _internal_has_location_rmse() const;
  public:
  void clear_location_rmse();
  const ::osi3::BaseMoving& location_rmse() const;
  ::osi3::BaseMoving* release_location_rmse();
  ::osi3::BaseMoving* mutable_location_rmse();
  void set_allocated_location_rmse(::osi3::BaseMoving* location_rmse);
  private:
  const ::osi3::BaseMoving& _internal_location_rmse() const;
  ::osi3::BaseMoving* _internal_mutable_location_rmse();
  public:
  void unsafe_arena_set_allocated_location_rmse(
      ::osi3::BaseMoving* location_rmse);
  ::osi3::BaseMoving* unsafe_arena_release_location_rmse();

  // @@protoc_insertion_point(class_scope:osi3.HostVehicleData)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::osi3::BaseMoving* location_;
  ::osi3::BaseMoving* location_rmse_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_osi_5fhostvehicledata_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// HostVehicleData

// .osi3.BaseMoving location = 1;
inline bool HostVehicleData::_internal_has_location() const {
  return this != internal_default_instance() && location_ != nullptr;
}
inline bool HostVehicleData::has_location() const {
  return _internal_has_location();
}
inline const ::osi3::BaseMoving& HostVehicleData::_internal_location() const {
  const ::osi3::BaseMoving* p = location_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::BaseMoving&>(
      ::osi3::_BaseMoving_default_instance_);
}
inline const ::osi3::BaseMoving& HostVehicleData::location() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.location)
  return _internal_location();
}
inline void HostVehicleData::unsafe_arena_set_allocated_location(
    ::osi3::BaseMoving* location) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  location_ = location;
  if (location) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.HostVehicleData.location)
}
inline ::osi3::BaseMoving* HostVehicleData::release_location() {
  
  ::osi3::BaseMoving* temp = location_;
  location_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osi3::BaseMoving* HostVehicleData::unsafe_arena_release_location() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.location)
  
  ::osi3::BaseMoving* temp = location_;
  location_ = nullptr;
  return temp;
}
inline ::osi3::BaseMoving* HostVehicleData::_internal_mutable_location() {
  
  if (location_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::BaseMoving>(GetArena());
    location_ = p;
  }
  return location_;
}
inline ::osi3::BaseMoving* HostVehicleData::mutable_location() {
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.location)
  return _internal_mutable_location();
}
inline void HostVehicleData::set_allocated_location(::osi3::BaseMoving* location) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_);
  }
  if (location) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location)->GetArena();
    if (message_arena != submessage_arena) {
      location = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location, submessage_arena);
    }
    
  } else {
    
  }
  location_ = location;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.location)
}

// .osi3.BaseMoving location_rmse = 2;
inline bool HostVehicleData::_internal_has_location_rmse() const {
  return this != internal_default_instance() && location_rmse_ != nullptr;
}
inline bool HostVehicleData::has_location_rmse() const {
  return _internal_has_location_rmse();
}
inline const ::osi3::BaseMoving& HostVehicleData::_internal_location_rmse() const {
  const ::osi3::BaseMoving* p = location_rmse_;
  return p != nullptr ? *p : reinterpret_cast<const ::osi3::BaseMoving&>(
      ::osi3::_BaseMoving_default_instance_);
}
inline const ::osi3::BaseMoving& HostVehicleData::location_rmse() const {
  // @@protoc_insertion_point(field_get:osi3.HostVehicleData.location_rmse)
  return _internal_location_rmse();
}
inline void HostVehicleData::unsafe_arena_set_allocated_location_rmse(
    ::osi3::BaseMoving* location_rmse) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_rmse_);
  }
  location_rmse_ = location_rmse;
  if (location_rmse) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:osi3.HostVehicleData.location_rmse)
}
inline ::osi3::BaseMoving* HostVehicleData::release_location_rmse() {
  
  ::osi3::BaseMoving* temp = location_rmse_;
  location_rmse_ = nullptr;
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::osi3::BaseMoving* HostVehicleData::unsafe_arena_release_location_rmse() {
  // @@protoc_insertion_point(field_release:osi3.HostVehicleData.location_rmse)
  
  ::osi3::BaseMoving* temp = location_rmse_;
  location_rmse_ = nullptr;
  return temp;
}
inline ::osi3::BaseMoving* HostVehicleData::_internal_mutable_location_rmse() {
  
  if (location_rmse_ == nullptr) {
    auto* p = CreateMaybeMessage<::osi3::BaseMoving>(GetArena());
    location_rmse_ = p;
  }
  return location_rmse_;
}
inline ::osi3::BaseMoving* HostVehicleData::mutable_location_rmse() {
  // @@protoc_insertion_point(field_mutable:osi3.HostVehicleData.location_rmse)
  return _internal_mutable_location_rmse();
}
inline void HostVehicleData::set_allocated_location_rmse(::osi3::BaseMoving* location_rmse) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete reinterpret_cast< ::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_rmse_);
  }
  if (location_rmse) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(location_rmse)->GetArena();
    if (message_arena != submessage_arena) {
      location_rmse = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, location_rmse, submessage_arena);
    }
    
  } else {
    
  }
  location_rmse_ = location_rmse;
  // @@protoc_insertion_point(field_set_allocated:osi3.HostVehicleData.location_rmse)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace osi3

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_osi_5fhostvehicledata_2eproto
